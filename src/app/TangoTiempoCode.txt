*************  Start of Code ***********
Code object : //./layout.js

// src/app/layout.js

import React from 'react';
import PropTypes from 'prop-types';
import Providers from '@/components/Providers';

export const metadata = {
  title: 'TangoTiempo',
  description: 'TangoTiempo is a comprehensive platform designed to connect Argentine Tango enthusiasts with events, classes, and workshops across the United States. Whether you’re a beginner looking to dive into the world of tango or an experienced dancer seeking new opportunities to refine your skills, TangoTiempo offers a centralized calendar and community-driven features to support your journey. Stay informed about the latest milongas, prácticas, and festivals in your calculatedRegion, filter events based on your preferences, and interact with organizers. With an intuitive design and robust functionality, TangoTiempo is your go-to resource for all things Argentine Tango. Explore, dance, and immerse yourself in the rich culture of Tango with TangoTiempo.',
  icons: {
    icon: '/TTred.png',
  },
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}

RootLayout.propTypes = {
  children: PropTypes.node.isRequired,
};

************. End of Code *************





*************  Start of Code ***********
Code object : //./_app.js

// _app.js
/* legacy for old*/


/* DO NOT USE THIS FILE FOR NEW CODE */


************. End of Code *************





*************  Start of Code ***********
Code object : //./contexts/useRegionsContex.js

//app/contexts/useRegionsContex.js

import { useContext } from 'react';
import { RegionsContext } from './RegionsContext';

export const useRegionsContext = () => {
  console.log('useRegionsContext');
  
  const context = useContext(RegionsContext);
  if (!context) {
    throw new Error('useRegionsContext must be used within a RegionsProvider');
  }
  return context;
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./contexts/useCalendarContext.js

//app/contexts/useCalendarContext.js

import { useContext } from 'react';
import { CalendarContext } from './CalendarContext';

export const useCalendarContext = () => {
  console.log('useCalendarContext');
  const context = useContext(CalendarContext);
  if (!context) {
    throw new Error('useCalendarContext must be used within a CalendarProvider');
  }
  return context;
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./contexts/CalendarContext.js

//app/contexts/CalendarContext.js


"use client";

import React, { createContext, useState } from 'react';
import PropTypes from 'prop-types';

export const CalendarContext = createContext();

export const CalendarProvider = ({ children }) => {
  const [datesSet, setDatesSet] = useState(null);

  return (
    <CalendarContext.Provider value={{ datesSet, setDatesSet }}>
      {children}
    </CalendarContext.Provider>
  );
};

CalendarProvider.propTypes = {
  children: PropTypes.node.isRequired,
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./contexts/AuthContext.js

//app/contexts/AuthContext.js

'use client';

import React, { createContext, useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { onAuthStateChanged, signInWithPopup, signOut, GoogleAuthProvider, signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '@/utils/firebase';
import axios from 'axios';
//import { listOfAllRoles } from '@/utils/masterData';

// Create Auth Context
export const AuthContext = createContext();

//console.log('AuthContext created');

// AuthProvider Component
export const AuthProvider = ({ children }) => {

  const [user, setUser] = useState(null);
  const [availableRoles, setAvailableRoles] = useState([]);
  const [selectedRole, setSelectedRole] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('  ');
  const signUpOngoing = useRef(false);

   
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        setUser(currentUser);

        if (!signUpOngoing.current) {
          await fetchUserRoles(currentUser.uid); // Fetch user roles
        }
      } else {
        setUser(null);
        setAvailableRoles([]); // Clear roles on logout
      }
      setLoading(false);
    });
          console.warn('Force setting role to RegionalOrganizer');
          setAvailableRoles(['RegionalOrganizer']);
          setSelectedRole('RegionalOrganizer');
    return () => unsubscribe();
  }, []);

//  useEffect(() => {
//    updateRoleBooleans(selectedRole);
//  }, [selectedRole]);

const fetchUserRoles = async (firebaseUserId) => {
  try {
    //console.log('Fetching user roles for UID:', firebaseUserId);
    const response = await axios.get(
      `${process.env.NEXT_PUBLIC_BE_URL}/api/userlogins/firebase/${firebaseUserId}`
    );

    if (response.status === 200) {
      //console.log('Fetched roles:', response.data.roleIds);
      const roles = response.data.roleIds.map((role) => role.roleName);
      setAvailableRoles(roles); 

      const initialRole = roles[0] || "";
      setSelectedRole(initialRole);
    } else {
      console.warn('Unexpected response status:', response.status);
      setAvailableRoles([]);
      setSelectedRole('');
    }
  } catch (err) {
    console.error('Failed to fetch user roles:', err);
    setError("Failed to fetch user roles");
    setAvailableRoles([]);
    setSelectedRole('');
  }
};

  // Authenticate with Google
   const authenticateWithGoogle = async () => {
    if (user) {
      setError("You are already signed in.");
      return null;
    }

    setLoading(true);
    const provider = new GoogleAuthProvider();

    try {
      signUpOngoing.current = true;
      console.log('Initiating Google sign-in...');
      const result = await signInWithPopup(auth, provider);
      console.log('Google sign-in successful:', result);
      const firebaseUserId = result.user.uid;

      try {
        console.log('Fetching user roles from backend...');
        await axios.get(
          `${process.env.NEXT_PUBLIC_BE_URL}/api/userlogins/firebase/${firebaseUserId}`
        );
      } catch (error) {
        console.error('Error fetching user from backend:', error);
        if (error.response && error.response.status === 404) {
          console.log('User not found in backend. Creating new user...');
          const roleResponse = await axios.post(
            `${process.env.NEXT_PUBLIC_BE_URL}/api/userlogins/`,
            { firebaseUserId }
          );
          if (roleResponse.status !== 204) {
            throw new Error("Failed to assign role in backend");
          }
        } else {
          throw error;
        }
      }

      signUpOngoing.current = false;
      setUser(result.user);
      await fetchUserRoles(firebaseUserId); // Fetch and set the user's roles after signup
      setLoading(false);
      return result.user;
    } catch (err) {
      console.error('Error in authenticateWithGoogle:', err);
      setError(err.message || 'An unexpected error occurred.');
      setLoading(false);
      signUpOngoing.current = false;
      return null;
    }
  };

  // Login with Email and Password
  const login = (email, password) => {
    return signInWithEmailAndPassword(auth, email, password);
  };

  // Logout Function

const logOut = async () => {
  try {
    await signOut(auth);
    console.log('User signed out successfully');
    // Optional: Reset other state variables if necessary
    setUser(null);
    setAvailableRoles([]);
    setSelectedRole('');
  } catch (error) {
    console.error('Error signing out:', error);
  }
};
  // Context Valu
  const value = {
    user,
    availableRoles,
    selectedRole,
    setSelectedRole,
    loading,
    error,
    logOut,
    authenticateWithGoogle,
    login,
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

AuthProvider.propTypes = {
  children: PropTypes.node.isRequired,
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./contexts/RegionsContext.js

//app/contexts/RegionsContext.js

"use client";

import React, { createContext, useState, useEffect } from 'react';
import { useRegions } from '@/hooks/useRegions';
import PropTypes from 'prop-types';

export const RegionsContext = createContext();
console.log('RegionsContext created');

export const RegionsProvider = ({ children }) => {
  const regionsData = useRegions(); // Custom hook to fetch regions
  const [regions, setRegions] = useState([]);
  const [selectedRegion, setSelectedRegion] = useState('');  // Name of the selected region
  const [selectedRegionID, setSelectedRegionID] = useState('');  // ID of the selected region
  const [selectedDivision, setSelectedDivision] = useState('');
  const [selectedCity, setSelectedCity] = useState('');

  // Populate regions when data is available
  useEffect(() => {
    if (regionsData) {
      setRegions(regionsData);
    }
  }, [regionsData]);
  return (
    <RegionsContext.Provider
      value={{
        regions,
        setRegions,
        selectedRegion,
        setSelectedRegion,
        selectedRegionID,
        setSelectedRegionID,  // Add setter for the region ID
        selectedDivision,
        setSelectedDivision,
        selectedCity,
        setSelectedCity
      }}
    >
      {children}
    </RegionsContext.Provider>
  );
};

RegionsProvider.propTypes = {
  children: PropTypes.node.isRequired,
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./contexts/usePostFilterContext.js

//app/contexts/usePostFilterContext.js


import { useContext } from 'react';
import { PostFilterContext } from './PostFilterContext';

export const usePostFilterContext = () => {
  console.log('usePostFilterContext');  
  const context = useContext(PostFilterContext);
  if (!context) {
    throw new Error('usePostFilterContext must be used within a PostFilterProvider');
  }
  return context;
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./contexts/PostFilterContext.js

//app/contexts/PostFilterContext.js

"use client";
import PropTypes from 'prop-types';
import React, { useContext,createContext, useState } from 'react';
import { RegionsContext } from '@/contexts/RegionsContext';
import useOrganizers from '@/hooks/useOrganizers';

export const PostFilterContext = createContext();
//console.log('PostFilterContext created');

export const PostFilterProvider = ({ children }) => {
    const { selectedRegion } = useContext(RegionsContext);
  const [selectedOrganizers, setSelectedOrganizers] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const organizers = useOrganizers(selectedRegion); // Fetch organizers based on selectedRegion

 // console.log('PostFilterProvider rendering. selectedOrganizers:', selectedOrganizers, 'selectedCategories:', selectedCategories);
  
  return (
    <PostFilterContext.Provider value={{
      organizers, // Provide organizers to the context
      selectedOrganizers,
      setSelectedOrganizers,
      selectedCategories,
      setSelectedCategories,
    }}>
      {children}
    </PostFilterContext.Provider>
  );
};

PostFilterProvider.propTypes = {
  children: PropTypes.node.isRequired,
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./contexts/RoleContext.js

//app/contexts/RoleContext.js

"use client";

import React, { createContext, useState, useEffect, useContext } from 'react';
import PropTypes from 'prop-types';
import { AuthContext } from '@/contexts/AuthContext';

export const RoleContext = createContext();
console.log('RoleContext created');


export const RoleProvider = ({ children }) => {
  const { availableRoles, selectedRole, setSelectedRole } = useContext(AuthContext);
  const [roles, setRoles] = useState([]);
console.log('RoleProvider rendering : selectedRole:', selectedRole);
  useEffect(() => {
    if (availableRoles && availableRoles.length > 0) {
      setRoles(availableRoles);
        setSelectedRole('RegionalOrganizer');
        console.warn('Forced selectedRole to RegionalOrganizer for testing');
    }
  }, [availableRoles]);


   const selectRole = (role) => {
    if (roles.includes(role)) {
        setSelectedRole(role);
    }
  };
    
  return (
    <RoleContext.Provider value={{ roles, selectedRole, selectRole }}>
      {children}
    </RoleContext.Provider>
  );
};

RoleProvider.propTypes = {
  children: PropTypes.node.isRequired,
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./calendar/layout.js

'use client'; // Enable client-side rendering

import {React, useContext, useEffect } from 'react';
import PropTypes from 'prop-types'; // Import prop-types
import { AuthContext } from '@/contexts/AuthContext';
import { RegionsContext } from '@/contexts/RegionsContext';

const RootLayout = ({ children }) => {
  const { user } = useContext(AuthContext);
  const { regions,selectedRegion } = useContext(RegionsContext);

  useEffect(() => {
    if (user?.displayName) {
      console.log('User Name:', user.displayName);
    }

    if (regions?.length > 0) {
      console.log('Selected Region:', selectedRegion);
    }
  }, [user, regions]);

  return (
    <>
      {children}
    </>
  );
};

// Define prop types for validation
RootLayout.propTypes = {
  children: PropTypes.node.isRequired, // Ensure that children is a valid React node
};

export default RootLayout;

************. End of Code *************





*************  Start of Code ***********
Code object : //./calendar/page.js

// app/calendar/page.js

"use client";
import Head from 'next/head';
import React, {useState, useContext } from "react";
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import listPlugin from "@fullcalendar/list";
import interactionPlugin from "@fullcalendar/interaction";
import { ButtonGroup, IconButton } from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
import TodayIcon from "@mui/icons-material/Today";
import CalendarMonthIcon from "@mui/icons-material/CalendarMonth";
import ViewWeekIcon from "@mui/icons-material/ViewWeek";
import ListIcon from "@mui/icons-material/List";

import SiteHeader from "@/components/UI/SiteHeader";
import SiteMenuBar from "@/components/UI/SiteMenuBar";
//import { CalendarContext } from '@/contexts/CalendarContext';
import { RegionsContext } from '@/contexts/RegionsContext';
import { PostFilterContext } from '@/contexts/PostFilterContext';
import { useCalendarPage } from "@/hooks/useCalendarPage";
import CalendarSubMenu from "@/components/UI/CalendarSubMenu";  
import CreateSingleEventModal from '@/components/Modals/CreateSingleEventModal';
//import EventDetailsModal from "@/components/Modals/EventDetailsModal";
//import EventCRUDModal from "@/components/Modals/EventCRUDModal";

const CalendarPage = () => {
      <Head>
      <title>Tango Tiempo - A national Tango Events Calendar </title>
      <meta name="description" content="Browse and find upcoming tango events in your region. Updated regularly with new listings." />
      <meta name="keywords" content="tango, tango events, local tango calendar, tango festivals" />
      <meta name="robots" content="index, follow" />
      <meta property="og:title" content="Tango Tiempo - Find Local Tango Events" />
      <meta property="og:description" content="Browse and find upcoming tango events in your region." />
      <meta property="og:type" content="website" />
      <meta property="og:url" content="https://www.tangotiempo.com" />
      </Head>
  
  //const { datesSet, setDatesSet } = useContext(CalendarContext);
  const { regions } = useContext(RegionsContext);
  const [clickedDate, setClickedDate] = useState(null); // Initialize clickedDate
  const { selectedOrganizers, selectedCategories } = useContext(PostFilterContext);
  //const [isCreateModalOpen, setCreateModalOpen] = useState(false);
  const {
        menuAnchor,
    menuItems,
    categories,
    handleMenuAction,
    handleMenuClose,
    activeCategories,
    handleCategoryChange,
    selectedRegion,
    selectedDivision,
    selectedCity,
    organizers,
    calendarRef,
    setSelectedRegion,
    setSelectedDivision,
    setSelectedCity,
    setSelectedEvent,
    isCreateModalOpen,
    setCreateModalOpen,
    handleDatesSet,
    handleEventCreated,
    handleRegionChange,
    handlePrev,
    handleNext,
    handleToday,
    handleDateClick,
    handleEventClick,
    handleOrganizerChange,
    coloredFilteredEvents,
  } = useCalendarPage();

  return (
    <div>
      <SiteHeader />
      <SiteMenuBar
        selectedRegion={selectedRegion}
        setSelectedRegion={setSelectedRegion}
        selectedDivision={selectedDivision}
        setSelectedDivision={setSelectedDivision}
        selectedCity={selectedCity}
        setSelectedCity={setSelectedCity}
        regions={regions}
        handleRegionChange={handleRegionChange}
        organizers={organizers}
        selectedOrganizers={selectedOrganizers}
        handleOrganizerChange={handleOrganizerChange}
        activeCategories={activeCategories}
        handleCategoryChange={handleCategoryChange}
        categories={categories}
      />
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          margin: "20px",
        }}
      >

        <ButtonGroup variant="outlined" aria-label="outlined button group">
          <IconButton onClick={handlePrev}>
            <ArrowBackIcon />
          </IconButton>
          <IconButton onClick={handleToday}>
            <TodayIcon />
          </IconButton>
          <IconButton onClick={handleNext}>
            <ArrowForwardIcon />
          </IconButton>
        </ButtonGroup>

        <ButtonGroup variant="outlined" aria-label="outlined button group">
          <IconButton
            onClick={() =>
              calendarRef.current.getApi().changeView("dayGridMonth")
            }
          >
            <CalendarMonthIcon />
          </IconButton>
          <IconButton
            onClick={() =>
              calendarRef.current.getApi().changeView("timeGridWeek")
            }
          >
            <ViewWeekIcon />
          </IconButton>
          <IconButton
            onClick={() => calendarRef.current.getApi().changeView("listWeek")}
          >
            <ListIcon />
          </IconButton>
        </ButtonGroup>
      </div>


      <FullCalendar
        plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin]}
        initialView="dayGridMonth"
        events={coloredFilteredEvents}
        datesSet={handleDatesSet}
        nextDayThreshold="04:00:00"
        eventClick={handleEventClick}
        dateClick={handleDateClick}
        ref={calendarRef}
        headerToolbar={false}
        scrollTime="17:00:00"
      />
            {/* SubMenu */}
      <CalendarSubMenu
        menuAnchor={menuAnchor}
        handleClose={handleMenuClose}
        menuItems={menuItems}
        onActionSelected={handleMenuAction}
      />

      <CreateSingleEventModal
        open={isCreateModalOpen}
        onClose={() => setCreateModalOpen(false)}
        selectedDate={clickedDate}
        selectedRegion={selectedRegion}
      />

    </div>
  );
};

export default CalendarPage;


************. End of Code *************





*************  Start of Code ***********
Code object : //./page.js

import { redirect } from 'next/navigation';

export default function Home() {
    redirect('/calendar');

    return null;
}

************. End of Code *************





*************  Start of Code ***********
Code object : //./auth/signup/page.js

//app/auth/signup/page.js

"use client";

import React, { useState } from 'react';
import Button from '@mui/material/Button';
import { useRouter } from 'next/navigation';
import { Box, Typography, Container, Paper } from '@mui/material';
import { useAuth } from '@/hooks/useAuth';

const SignUpPage = () => {
    const router = useRouter();
    const { user, loading, error, authenticateWithGoogle } = useAuth();
    const [isRedirecting, setIsRedirecting] = useState(false);

    const handleGoogleSignUp = async () => {
        setIsRedirecting(true);
        const result = await authenticateWithGoogle();
        if (result) {
            router.push('/calendar');
        } else {
            setIsRedirecting(false);
        }
    };

    if (loading || isRedirecting) {
        return <Typography>Loading...</Typography>;
    }

    if (error) {
        return <Typography>Error: {error}</Typography>;
    }

    if (user) {
        return (
            <Container component="main" maxWidth="xs">
                <Paper elevation={3} sx={{ padding: 4, marginTop: 8 }}>
                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <Typography component="h1" variant="h5" gutterBottom>
                            You are already logged in!
                        </Typography>
                        <Button
                            variant="contained"
                            color="primary"
                            sx={{ cursor: 'pointer', mt: 2 }}
                            onClick={() => router.push('/calendar')}
                        >
                            Go to Calendar
                        </Button>
                    </Box>
                </Paper>
            </Container>
        );
    }

    return (
        <Container component="main" maxWidth="xs">
            <Paper elevation={3} sx={{ padding: 4, marginTop: 8 }}>
                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                    <Typography component="h1" variant="h5" gutterBottom>
                        Sign Up
                    </Typography>
                    <Typography variant="body2" color="textSecondary" align="center" paragraph>
                        Sign up with your Google account to start organizing and managing Tango events.
                    </Typography>
                    <Box
                        component="img"
                        src="/web_light_rd_SU@1x.png"
                        alt="Sign up with Google"
                        sx={{ cursor: 'pointer', mt: 2, mb: 2 }}
                        onClick={handleGoogleSignUp}
                    />
                </Box>
            </Paper>
        </Container>
    );
};

export default SignUpPage;

************. End of Code *************





*************  Start of Code ***********
Code object : //./auth/signup/pageSignUpPage.cy.js

import React from 'react'
import SignUpPage from './page'

describe('<SignUpPage />', () => {
  it('renders', () => {
    // see: https://on.cypress.io/mounting-react
    cy.mount(<SignUpPage />)
  })
})
************. End of Code *************





*************  Start of Code ***********
Code object : //./auth/login/page.js

//app/auth/login/page.js

"use client";

import React, { useState } from 'react';
import Button from '@mui/material/Button';
import { useRouter } from 'next/navigation';
import { Box, Typography, Container, Paper } from '@mui/material';
import { useAuth } from '@/hooks/useAuth';

const LoginPage = () => {
    const router = useRouter();
    const { user, loading, error, authenticateWithGoogle } = useAuth();
    const [isRedirecting, setIsRedirecting] = useState(false);
  console.log('LoginPage called'); // Debugging
    const handleGoogleLogIn = async () => {
        console.log('handleGoogleLogIn called'); // Debugging
        setIsRedirecting(true);
        const result = await authenticateWithGoogle();
        if (result) {
                        console.log('Login successful, redirecting'); // Debugging
            router.push('/calendar');
        
        } else {
                        console.log('Login failed'); // Debugging
            setIsRedirecting(false);
        }
    };

    if (loading || isRedirecting) {
        return <Typography>Loading...</Typography>;
    }

    if (error) {
        return <Typography>Error: {error}</Typography>;
    }

    if (user) {
        return (
            <Container component="main" maxWidth="xs">
                <Paper elevation={3} sx={{ padding: 4, marginTop: 8 }}>
                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <Typography component="h1" variant="h5" gutterBottom>
                            You are already logged in!
                        </Typography>
                        <Button
                            variant="contained"
                            color="primary"
                            sx={{ cursor: 'pointer', mt: 2 }}
                            onClick={() => router.push('/calendar')}
                        >
                            Go to Calendar
                        </Button>
                    </Box>
                </Paper>
            </Container>
        );
    }

    return (
        <Container component="main" maxWidth="xs">
            <Paper elevation={3} sx={{ padding: 4, marginTop: 8 }}>
                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                    <Typography component="h1" variant="h5" gutterBottom>
                        Log In
                    </Typography>
                    <Typography variant="body2" color="textSecondary" align="center" paragraph>
                        Log in with your Google account to access your Tango events calendar.
                    </Typography>
                    <Box
                        component="img"
                        src="/web_light_rd_ctn@1x.png"
                        alt="Log in with Google"
                        sx={{ cursor: 'pointer', mt: 2, mb: 2 }}
                        onClick={handleGoogleLogIn}
                    />
                </Box>
            </Paper>
        </Container>
    );
};

export default LoginPage;

************. End of Code *************





*************  Start of Code ***********
Code object : //./utils/1x-scripts/btc_load.js

import axios from 'axios';

// Define the API URL
const apiUrl = 'https://bostontangocalendar.com/wp-json/tribe/events/v1/events';

// Fetch the data
axios.get(apiUrl)
    .then(response => {
        const events = response.data.events;

        // Transform the events to fit your calendar's required format
        const transformedEvents = events.map(event => ({
            title: event.title,
            start: event.utc_start_date,
            end: event.utc_end_date,
            description: event.description,
            url: event.url,
            image: event.image.url,
            //            category: event.categories.map(cat => cat.name).join(', '),
            //            location: `${event.venue.venue}, ${event.venue.address}, ${event.venue.city}`,
            region: 'Boston' // Map all events to the Boston region
        }));

        // Log the transformed data or use it in your application
        //console.log('Transformed Events:', transformedEvents);

        // Example: Insert into your calendar or database
        transformedEvents.forEach(event => {
            // Insert event into your calendar
            // calendar.addEvent(event); // Assuming you have a method to add events to the calendar
        });
    })
    .catch(error => {
        console.error('Error fetching events:', error);
    });
************. End of Code *************





*************  Start of Code ***********
Code object : //./utils/transformEvents.js

export function transformEvents(events) {
  //console.log("TransformEvent received:", events);

  return events.map((event) => ({
    title: event.title, // Use the 'title' field from the API
    start: event.startDate, // Map 'startDate' to 'start'
    end: event.endDate, // Map 'endDate' to 'end'
    extendedProps: {
      // Any additional data
      description: event.description,
      standardsTitle: event.standardsTitle,
      categoryFirst: event.categoryFirst,
      categorySecond: event.categorySecond,
      categoryThird: event.categoryThird,
      eventImage: event.eventImage,
      locationID: event.locationID,
      locationName: event.locationName,
      cost: event.cost,
      calculatedRegionName: event.calculatedRegionName,
      calculatedDivisionName: event.calculatedDivisionName,
      calculatedCityName: event.calculatedCityName,
      active: event.active,
      recurrenceRule: event.recurrenceRule,
      ownerOrganizerID: event.ownerOrganizerID,
      grantedOrganizerID: event.grantedOrganizerID,
      alternateOrganizerID: event.alternateOrganizerID,
      ownerOrganizerName: event.ownerOrganizerName,
      featured: event.featured,
    },
  }));
}

************. End of Code *************





*************  Start of Code ***********
Code object : //./utils/masterData.js

// Roles available in the system
export const listOfAllRoles = {
  NAMED_USER: 'NamedUser',
  REGIONAL_ORGANIZER: 'RegionalOrganizer',
  REGIONAL_ADMIN: 'RegionalAdmin',
  SYSTEM_OWNER: 'SystemOwner',
  ANONYMOUS: 'Anonymous',
};

export const defaultTestLocationID = {
  calculatedRegionName: 'Northeast',
  calculatedDivisionName: 'New England',
  calculatedCityName: 'Boston',
  locationID: '66c8bc4c6b597390419b9187',
  locationName: 'Fake Tango Venue',
};

export const defaultTestOrganizer = {
            ownerOrganizerID: '6442ccb5f88a6c48aa30be35',
            grantedOrganizerID: '6442ccb5f88a6c48aa30be35',
    alternateOrganizerID: '6442ccb5f88a6c48aa30be35'
            
};

************. End of Code *************





*************  Start of Code ***********
Code object : //./utils/categoryColors.js

// Define category colors
export const categoryColors = {
    Festival: 'green',
    Milonga: 'blue',
    Practica: 'cyan',
    Class: 'lightPink',
    Workshop: 'lightgreen',
    Trip: 'yellow',
    Virtual: 'lightGray'
};


export const coloredFilteredEvents = (events, activeCategories) => {
    if (!Array.isArray(events)) return [];

    // Filter events based on active categories
    const filteredEvents = activeCategories.length === 0
        ? events  // If no active categories, return all events
        : events.filter(event => activeCategories.includes(event.categoryFirst));

    // Apply colors to the filtered events
    const coloredEvents = filteredEvents.map(event => {
        const categoryColor = categoryColors[event.categoryFirst] || 'lightGrey'; // Default color
        return {
            ...event,
            backgroundColor: categoryColor,  // Set background to the category color
            textColor: categoryColor,        // Set text color to match the background (for debugging, you can change this)
        };
    });

  //  console.log('Colored events:', coloredEvents); // Debugging log to check colored events
    return coloredEvents;
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./utils/firebase.js

// utils/firebase.js

import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';

// Decode the Base64 encoded JSON string from the environment variable
const decodedFirebaseConfig = JSON.parse(
  Buffer.from(process.env.NEXT_PUBLIC_FIREBASE_JSON, 'base64').toString('utf-8')
);


  console.log('Firebase Config:', decodedFirebaseConfig); // Debugging line

// Initialize Firebase app
const app = initializeApp(decodedFirebaseConfig);

// Export auth for use in other components
export const auth = getAuth(app);

************. End of Code *************





*************  Start of Code ***********
Code object : //./utils/EventCreateRules.js

// src/utils/EventCreateRules.js
export const validateEvent = (eventData) => {
    const errors = [];

    // End date must be after start date
    if (new Date(eventData.endDate) <= new Date(eventData.startDate)) {
        errors.push("End date and time must be after the start date and time.");
    }


    return errors;
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./utils/images.js

// ./utils/image.js

// ./utils/image.js

export const isValidImage = (eventImage) => {
    if (!eventImage) return false;

    const img = new Image();
    img.src = eventImage;

    return new Promise((resolve) => {
        img.onload = () => {
            const isLandscape = img.width > img.height;
            resolve(isLandscape);
        };
        img.onerror = () => {
            resolve(false);
        };
    });
};


// Function to apply the event image if it is valid and the event is featured
export const applyEventImage = async (event) => {
    if (event.eventImage && event.featured) {
        const valid = await isValidImage(event.eventImage);
        return valid ? event.eventImage : null;
    }
    return null;
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/UI/CalendarSubMenu.js

// components/UI/CalendarSubMenu.js

import React from 'react';
import PropTypes from 'prop-types';
import { Menu, MenuItem } from '@mui/material';

const CalendarSubMenu = ({ menuAnchor, handleClose, menuItems, onActionSelected }) => {
  return (
    <Menu
      open={!!menuAnchor}
      onClose={handleClose}
      anchorReference="anchorPosition"
      anchorPosition={
        menuAnchor !== null
          ? { top: menuAnchor.mouseY, left: menuAnchor.mouseX }
          : undefined
      }
    >
      {menuItems.map((item, index) => (
        <MenuItem key={index} onClick={() => onActionSelected(item.action)}>
          {item.label}
        </MenuItem>
      ))}
    </Menu>
  );
};

CalendarSubMenu.propTypes = {
  menuAnchor: PropTypes.shape({
    mouseX: PropTypes.number,
    mouseY: PropTypes.number
  }),
  handleClose: PropTypes.func.isRequired,
  menuItems: PropTypes.arrayOf(
    PropTypes.shape({
      label: PropTypes.string.isRequired,
      action: PropTypes.string.isRequired,
    })
  ).isRequired,
  onActionSelected: PropTypes.func.isRequired,
};

export default CalendarSubMenu;
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/UI/SiteHeader.js

//app/components/UI/SiteHeader.js

import React from 'react';
import Image from 'next/image';

const SiteHeader = () => {
    // Assuming run_number is passed as a prop or can be fetched in this component
    const runNumber = process.env.NEXT_PUBLIC_BUILD_VERSION || 'Local'; // Fallback value if not set

    return (
        <div style={{ position: 'relative', width: '100%', height: 'auto' }}>
            <Image
                src="/TangoTiempoColorFull.png"
                alt="Tango Tiempo"
                width={1200}
                height={600}
                style={{ width: '100%', height: 'auto' }}
                priority
            />
            <a
                href="https://www.buymeacoffee.com/ybotman"
                target="_blank"
                rel="noopener noreferrer"
                style={{
                    position: 'absolute',
                    top: '10px',
                    left: '10px',
                    backgroundColor: 'rgba(0, 255, 255, 0.7)',
                    color: '#000',
                    padding: '5px 10px',
                    borderRadius: '3px',
                    textDecoration: 'none',
                    fontWeight: 'normal',
                    fontSize: '12px',
                }}
            >
                Gift an Empanada
            </a>
            <div
                style={{
                    position: 'absolute',
                    top: '10px',
                    width: '100%',
                    textAlign: 'center',
                    color: 'white',
                    fontSize: '12px',
                    opacity: '0.8', // Slight transparency to keep it inconspicuous
                }}
            >
                {runNumber}
            </div>
        </div>
    );
};

export default SiteHeader;
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/UI/SiteMenuBar.js

// src/app/components/UI/SiteMenuBar.js

"use client";

import React, { useContext, useState } from "react";
import PropTypes from "prop-types";
import {
  Box,
  IconButton,
  Menu, Divider,
  MenuItem,
  Button,
  Stack,
  Typography,
  FormControl,
  InputLabel,
  Select,
} from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import PostFilter from "@/components/UI/PostFilter";
import { AuthContext } from '@/contexts/AuthContext';
import { RegionsContext } from '@/contexts/RegionsContext';
import { PostFilterContext } from '@/contexts/PostFilterContext';
import { RoleContext } from '@/contexts/RoleContext';
import FAQModal from '@/components/Modals/FAQModal'; // Import the help modal
import { listOfAllRoles } from "@/utils/masterData"; 

const SiteMenuBar = ({
  regions,
  activeCategories,
  handleCategoryChange,
  categories,
  selectedOrganizer,
  handleOrganizerChange,
}) => {
   const { user, availableRoles, logOut, selectedRole } = useContext(AuthContext);
  const { selectedRegion, setSelectedRegion, selectedDivision, setSelectedDivision, selectedCity, setSelectedCity } = useContext(RegionsContext);
  const { organizers } = useContext(PostFilterContext);
  const { roles, selectRole } = useContext(RoleContext);
  const [anchorEl, setAnchorEl] = useState(null);
  const [FAQModalOpen, setFAQModalOpen] = useState(false);

  // Renamed handleMenu to handleHamburgerMenu
  const handleHamburgerMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleHamburgerMenuClose = () => {
    setAnchorEl(null);
  };

  const openFAQModal = () => {
    setFAQModalOpen(true);
  };

  const closeFAQModal = () => {
    setFAQModalOpen(false);
  };

  const handleRoleChange = (event) => {
    selectRole(event.target.value);
    console.log('Role changed to:', event.target.value);
  };

  const handleRegionChange = (event) => {
    const value = event.target.value;
    console.log("handleRegionChange:", value);
    setSelectedRegion(value);
    setSelectedDivision("");
    setSelectedCity("");
  };

  const handleDivisionChange = (event) => {
    const value = event.target.value;
    console.log("handleDivisionChange:", value);
    setSelectedDivision(value);
    setSelectedCity("");
  };

  const handleCityChange = (event) => {
    const value = event.target.value;
    console.log("handleCityChange:", value);
    setSelectedCity(value);
  };

  return (
    <Box sx={{ width: "100%", padding: "0 0" }}>
      {/* Top row with main menu items and user state */}
      <Box
        sx={{
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center" }}>
          {/* Hamburger Menu */}
          <IconButton
            edge="start"
            color="inherit"
            aria-label="menu"
            onClick={handleHamburgerMenuOpen}
          >
            <MenuIcon />
          </IconButton>
          <Menu
            anchorEl={anchorEl}
            open={Boolean(anchorEl)}
            onClose={handleHamburgerMenuClose}
          >
            {/* Conditional menu items based on roles */}
            {selectedRole === listOfAllRoles.NAMED_USER && <MenuItem>User Settings</MenuItem>}
            {selectedRole === listOfAllRoles.REGIONAL_ORGANIZER && <MenuItem>Organizer Settings</MenuItem>}
            {selectedRole === listOfAllRoles.REGIONAL_ORGANIZER && <MenuItem>Location Management</MenuItem>}
            {selectedRole === listOfAllRoles.REGIONAL_ADMIN && <MenuItem>Add Organizers</MenuItem>}
            <Divider />
            <MenuItem onClick={openFAQModal}>FAQ</MenuItem>
            <MenuItem>About TangoTiempo</MenuItem>
            <MenuItem>Help</MenuItem>
          </Menu>
          {/* Region Dropdown */}
          <select value={selectedRegion || ""} onChange={handleRegionChange}>
            <option value="">Select Region</option>
            {regions.map((region) => (
              <option key={region.regionName} value={region.regionName}>
                {region.regionName}
              </option>
            ))}
          </select>
          {/* Division Dropdown */}
          {selectedRegion && (
            <select
              value={selectedDivision || ""}
              onChange={handleDivisionChange}
            >
              <option value="">Select Division</option>
              {regions
                .find((region) => region.regionName === selectedRegion)
                .divisions.map((division) => (
                  <option
                    key={division.divisionName}
                    value={division.divisionName}
                  >
                    {division.divisionName}
                  </option>
                ))}
            </select>
          )}
          {/* City Dropdown */}
          {selectedDivision && (
            <select value={selectedCity || ""} onChange={handleCityChange}>
              <option value="">Select City</option>
              {regions
                .find((region) => region.regionName === selectedRegion)
                .divisions.find(
                  (division) => division.divisionName === selectedDivision
                )
                .majorCities.map((city) => (
                  <option key={city._id} value={city.cityName}>
                    {city.cityName}
                  </option>
                ))}
            </select>
          )}
          {/* Organizer Dropdown */}
          {selectedRegion && organizers && organizers.length > 0 && (
            <select
              value={selectedOrganizer || ""}
              onChange={(e) => handleOrganizerChange(e.target.value)}
            >
              <option value="">Select Organizer</option>
              <option value="none">None</option>
              {organizers.map((org) => (
                <option key={org._id} value={org._id}>
                  {org.shortName}
                </option>
              ))}
            </select>
          )}
        </Box>
        {/* User State and Role Dropdown */}
        {user ? (
          <Stack direction="row" spacing={1} alignItems="center">
            <Typography variant="body1" color="textPrimary">
              {user.displayName || user.email}
            </Typography>
            <FormControl variant="outlined" size="small" sx={{ minWidth: 120 }}>
              <InputLabel id="role-select-label">Role</InputLabel>
              <Select
                labelId="role-select-label"
                id="role-select"
                value={selectedRole}
                onChange={handleRoleChange}
                label="Role"
              >
                {roles.map((role) => (
                  <MenuItem key={role} value={role}>
                    {role}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <Button
              variant="outlined"
              color="inherit"
              size="small"
              onClick={logOut}
            >
              Log Out
            </Button>
          </Stack>
        ) : (
          <Stack direction="row" spacing={1}>
            <Button
              variant="contained"
              color="primary"
              size="small"
              href="/auth/login"
            >
              Log In
            </Button>
            <Button
              variant="contained"
              color="secondary"
              size="small"
              href="/auth/signup"
            >
              Sign Up
            </Button>
          </Stack>
        )}
      </Box>
      {/* Bottom row with Category Filter */}
      <Box
        sx={{
          width: "100%",
          display: "flex",
          justifyContent: "center",
          marginTop: 2,
        }}
      >
        <PostFilter
          activeCategories={activeCategories}
          handleCategoryChange={handleCategoryChange}
          categories={categories}
          selectedOrganizer={selectedOrganizer}
        />
      </Box>
      {/* Help Modal */}
      <FAQModal open={FAQModalOpen} handleClose={closeFAQModal} />
    </Box>
  );
};

SiteMenuBar.propTypes = {
  regions: PropTypes.arrayOf(
    PropTypes.shape({
      regionName: PropTypes.string.isRequired,
      divisions: PropTypes.arrayOf(
        PropTypes.shape({
          divisionName: PropTypes.string.isRequired,
          majorCities: PropTypes.arrayOf(
            PropTypes.shape({
              _id: PropTypes.string.isRequired,
              cityName: PropTypes.string.isRequired,
            })
          ).isRequired,
        })
      ).isRequired,
    })
  ).isRequired,
  activeCategories: PropTypes.arrayOf(PropTypes.string).isRequired,
  handleCategoryChange: PropTypes.func.isRequired,
  categories: PropTypes.arrayOf(
    PropTypes.shape({
      categoryName: PropTypes.string.isRequired,
    })
  ).isRequired,
  selectedOrganizer: PropTypes.string.isRequired,
  handleOrganizerChange: PropTypes.func.isRequired,
};

export default SiteMenuBar;
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/UI/PostFilter.js

//app/components/UI/PostFilter.js// app/components/UI/PostFilter.js

"use client";

import React, { useContext } from "react";
import PropTypes from "prop-types";
import { categoryColors } from "@/utils/categoryColors";
import { PostFilterContext } from '@/contexts/PostFilterContext';

const PostFilter = ({
  activeCategories = [],
  categories = [],
  handleCategoryChange,
}) => {

  return (
    <div className="category-filter">
      {categories && categories.length > 0 ? (
        categories.map((category) => {
           const isActive = activeCategories.includes(category.categoryName);
         return (
            <button
              key={category._id}
              style={{
                backgroundColor: isActive
                  ? categoryColors[category.categoryName]
                  : "white",
                color: isActive ? "black" : "grey",
                padding: "2px 2px",
                border: isActive ? "none" : "1px solid grey",
                borderRadius: "4px",
                margin: "3px",
              }}
              className={`category-button ${isActive ? "active" : ""}`}
              onClick={() => handleCategoryChange(category.categoryName)}
            >
              {category.categoryName}
            </button>
          );
        })
      ) : (
        <p>No categories available</p>
      )}
    </div>
  );
};

PostFilter.propTypes = {
  categories: PropTypes.arrayOf(
    PropTypes.shape({
      categoryName: PropTypes.string.isRequired,
    })
  ).isRequired,
  activeCategories: PropTypes.arrayOf(PropTypes.string).isRequired,
  handleCategoryChange: PropTypes.func.isRequired,
  selectedOrganizer: PropTypes.string,
};

export default PostFilter;
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/Modals/CreateSingleEventModal.js

// CreateSingleEventModal.js
import React, { useState, useContext, useEffect } from 'react';
import { Modal, Box, Typography, TextField, Button, MenuItem, Grid } from '@mui/material';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import '@/styles/customDatePicker.css';
import { useCreateEvent } from '@/hooks/useEvents';
import useCategories from '@/hooks/useCategories';
import { RegionsContext } from '@/contexts/RegionsContext';
import { useLocations } from '@/hooks/useLocations';

const modalStyle = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: '90%',
    maxWidth: '600px',
    bgcolor: 'background.paper',
    boxShadow: 24,
    p: 3,
    maxHeight: '90vh',
    overflowY: 'auto',
};

const CreateSingleEventModal = ({ open, onClose, selectedDate, onCreate }) => {
  const { selectedRegion, selectedRegionID, selectedDivision, selectedCity } = useContext(RegionsContext);
  console.log('CreateSingleEventModal Selected Region:2', selectedRegion, selectedRegionID);

    const { locations, loading, error } = useLocations(selectedRegionID, selectedDivision?._id, selectedCity?._id);
console.log("Locations:", locations);
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [startDate, setStartDate] = useState(selectedDate || new Date());
    const [endDate, setEndDate] = useState(selectedDate || new Date());
    const [cost, setCost] = useState('');
    const [location, setLocation] = useState('');

    const handleSave = () => {
        const eventData = {
            title,
            description,
            startDate,
            endDate,
            cost,
            locationId: location,
        };
        // Handle event creation or trigger the onCreate action
    };

    return (
        <Modal open={open} onClose={onClose} aria-labelledby="create-event-title">
            <Box sx={modalStyle}>
                <Typography id="create-event-title" variant="h6" component="h2" sx={{ mb: 2 }}>
                    Create Single Event
                </Typography>

                <TextField
                    fullWidth
                    label="Event Title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    margin="normal"
                />

                <TextField
                    fullWidth
                    label="Description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    margin="normal"
                    multiline
                    rows={4}
                />

                <Grid container spacing={2}>
                    <Grid item xs={6}>
                        <Typography variant="body2">Starting:</Typography>
                        <DatePicker
                            selected={startDate}
                            onChange={(date) => setStartDate(date)}
                            showTimeSelect
                            dateFormat="Pp"
                            placeholderText="Start Date"
                            className="custom-datepicker"
                        />
                    </Grid>
                    <Grid item xs={6}>
                        <Typography variant="body2">Ending:</Typography>
                        <DatePicker
                            selected={endDate}
                            onChange={(date) => setEndDate(date)}
                            showTimeSelect
                            dateFormat="Pp"
                            placeholderText="End Date"
                            className="custom-datepicker"
                        />
                    </Grid>
                </Grid>

                <TextField
                    fullWidth
                    label="Cost"
                    value={cost}
                    onChange={(e) => setCost(e.target.value)}
                    margin="normal"
                />

                {/* Locations Dropdown */}
                <TextField
                    fullWidth
                    select
                    label="Select Location"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                    margin="normal"
                >
                    {loading ? (
                        <MenuItem value="" disabled>
                            Loading locations...
                        </MenuItem>
                    ) : error ? (
                        <MenuItem value="" disabled>
                            Error fetching locations
                        </MenuItem>
                    ) : (
                        locations.map((loc) => (
                            <MenuItem key={loc._id} value={loc._id}>
                                {loc.name}
                            </MenuItem>
                        ))
                    )}
                </TextField>

                <Box mt={2} display="flex" justifyContent="space-between">
                    <Button onClick={handleSave} variant="contained" color="primary">
                        Save
                    </Button>
                    <Button onClick={onClose} variant="outlined" color="secondary">
                        Cancel
                    </Button>
                </Box>
            </Box>
        </Modal>
    );
};

export default CreateSingleEventModal;
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/Modals/EventDetailsModal.js

//app/components/Modals/EventDetailsModal.js

import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { Modal, Box, Typography, Button, Grid, CardMedia } from '@mui/material';
import { Close } from '@mui/icons-material';

const modalStyle = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: '80%',
    maxWidth: '600px',
    bgcolor: 'white',
    borderRadius: '8px',
    boxShadow: 24,
    p: 4,
    color: 'black'
};

const titleStyle = {
    color: 'blue',
    fontWeight: 'bold',
};

const textStyle = {
    color: 'grey',
};

const EventDetailsModal = ({ event, open, onClose }) => {
    const [isImageValid, setIsImageValid] = useState(true);

    useEffect(() => {
        if (event?.extendedProps?.eventImage) {
            const img = new Image();
            img.src = event.extendedProps.eventImage;
            img.onload = () => setIsImageValid(true);
            img.onerror = () => setIsImageValid(false);
        } else {
            setIsImageValid(false);
        }
    }, [event]);

    if (!event) return null;

    return (
        <Modal
            open={open}
            onClose={onClose}
            aria-labelledby="event-details-modal-title"
            aria-describedby="event-details-modal-description"
        >
            <Box sx={modalStyle}>
                <Grid container justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography id="event-details-modal-title" variant="h5" component="h2" sx={titleStyle}>
                        {event.title}
                    </Typography>
                    <Button onClick={onClose} startIcon={<Close />} />
                </Grid>
                {isImageValid ? (
                    <CardMedia
                        component="img"
                        height="200"
                        image={event.extendedProps.eventImage}
                        alt={event.title}
                        sx={{ borderRadius: '8px', mb: 2 }}
                    />
                ) : (
                    <Typography variant="subtitle1" color="error" sx={{ mb: 2 }}>
                        Image Broken
                    </Typography>
                )}
                <Typography id="event-details-modal-description" sx={textStyle}>
                    <strong style={{ color: 'black' }}>Description:</strong> {event.extendedProps.description}<br />
                    <strong style={{ color: 'black' }}>Location:</strong> {event.extendedProps.locationName}<br />
                    <strong style={{ color: 'black' }}>Cost:</strong> {event.extendedProps.cost}<br />
                    <strong style={{ color: 'black' }}>Region:</strong> {event.extendedProps.calculatedRegionName}<br />
                    <strong style={{ color: 'black' }}>Division:</strong> {event.extendedProps.calculatedDivisionName}<br />
                    <strong style={{ color: 'black' }}>City:</strong> {event.extendedProps.calculatedCityName}<br />
                    <strong style={{ color: 'black' }}>Recurrence:</strong> {event.extendedProps.recurrenceRule}<br />
                    <strong style={{ color: 'black' }}>Categories:</strong> {`${event.extendedProps.categoryFirst || ''}, ${event.extendedProps.categorySecond || ''}, ${event.extendedProps.categoryThird || ''}`.replace(/, ,/g, '')}
                </Typography>
                <Box sx={{ mt: 3, textAlign: 'right' }}>
                    <Button variant="contained" color="primary" onClick={onClose}>
                        Close
                    </Button>
                </Box>
            </Box>
        </Modal>
    );
};

EventDetailsModal.propTypes = {
    event: PropTypes.shape({
        title: PropTypes.string.isRequired,
        extendedProps: PropTypes.shape({
            eventImage: PropTypes.string,
            description: PropTypes.string,
            locationName: PropTypes.string,
            cost: PropTypes.string,
            calculatedRegionName: PropTypes.string,
            calculatedDivisionName: PropTypes.string,
            calculatedCityName: PropTypes.string,
            recurrenceRule: PropTypes.string,
            categoryFirst: PropTypes.string,
            categorySecond: PropTypes.string,
            categoryThird: PropTypes.string,
        }).isRequired,
    }).isRequired,
    open: PropTypes.bool.isRequired,
    onClose: PropTypes.func.isRequired,
};

export default EventDetailsModal;
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/Modals/EventCRUDModal.js

import React, { useEffect, useState } from 'react';
import { Modal, Box, Typography, TextField, Button, MenuItem, Grid } from '@mui/material';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import '@/styles/customDatePicker.css';
import { useCreateEvent } from '@/hooks/useEvents';
import useCategories from '@/hooks/useCategories';
import PropTypes from 'prop-types';
import { validateEvent } from '@/utils/EventCreateRules'; // Import validation function


const modalStyle = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: '90%',
    maxWidth: '600px',
    bgcolor: 'background.paper',
    boxShadow: 24,
    p: 3,
    maxHeight: '90vh',
    overflowY: 'auto',
};

const EventCRUDModal = ({ open, onClose, selectedDate, selectedRegion, onCreate }) => {
    const createEvent = useCreateEvent(); // Use the createEvent function
    const categories = useCategories(); // Use the useCategories hook
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [categoryFirst, setCategoryFirst] = useState('');
    const [categorySecond, setCategorySecond] = useState('');
    const [categoryThird, setCategoryThird] = useState('');
    const [startDate, setStartDate] = useState(selectedDate || new Date());
    const [endDate, setEndDate] = useState(selectedDate || new Date());
    const [cost, setCost] = useState('');
    const [recurrenceRule, setRecurrenceRule] = useState('');


    const handleSave = async () => {
        console.log('* * * * I AM DEFAULTING REGIONS AND LOCTIONS!  FIX FIX FIX via handleSave');
        console.error('* * * * I AM DEFAULTING REGIONS AND LOCTIONS!  FIX FIX FIX via handleSave');
        const eventData = {
            title,
            description,
            categoryFirst,
            categorySecond,
            categoryThird,
            startDate,
            endDate,
            calculatedRegionName: 'Northeast', // Added calculatedRegionName
            calculatedDivisionName: 'New England', // Added calculatedDivisionName
            calculatedCityName: 'Boston', // Added calculatedCityName
            locationID: '66c8bc4c6b597390419b9187', // Added locationID
            locationName: 'Fake Tango Venue', // Added locationName
            cost,
            recurrenceRule,
            standardsTitle: '',
            ownerOrganizerID: '6442ccb5f88a6c48aa30be35',
            grantedOrganizerID: '6442ccb5f88a6c48aa30be35',
            alternateOrganizerID: '6442ccb5f88a6c48aa30be35',
            ownerOrganizerName: 'Your Organizer Name',
            regionID: '6442ccb5f88a6c48aa30be35',
            regionName: 'Northeast',
            eventImage: 'https://example.com/image.jpg',
            active: true,
            featured: false,
            expiresAt: '2026-09-16T00:00:00.000+00:00',
        };

        try {
            await createEvent(eventData); // Use the createEvent function
            console.log('Event created successfully');
            if (onCreate) {
                onCreate();
            }
        } catch (error) {
            console.error('Error creating event:', error);
        }

        onClose();


    };


    return (
        <Modal
            open={open}
            onClose={onClose}
            aria-labelledby="modal-modal-title"
            aria-describedby="modal-modal-description"
        >
            <Box sx={modalStyle}>
                <Typography variant="caption" color="textSecondary" sx={{ color: 'blue', mt: 2 }}>
                    Region: {selectedRegion}
                </Typography>

                <Typography id="modal-modal-title" variant="h6" component="h2" sx={{ color: 'blue' }}>
                    Create Event
                </Typography>

                <TextField
                    fullWidth
                    label="Event Title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    margin="normal"
                />

                <TextField
                    fullWidth
                    label="Description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    margin="normal"
                    multiline
                    rows={4}
                />

                <Typography variant="body2">Starting:</Typography>
                <DatePicker
                    selected={startDate}
                    onChange={(date) => setStartDate(date)}
                    showTimeSelect
                    dateFormat="Pp"
                    placeholderText="Start Date"
                    className="custom-datepicker"
                />

                <Typography variant="body2">Ending:</Typography>
                <DatePicker
                    selected={endDate}
                    onChange={(date) => setEndDate(date)}
                    showTimeSelect
                    dateFormat="Pp"
                    placeholderText="End Date"
                    className="custom-datepicker"
                />

                <Grid container spacing={2}>
                    <Grid item xs={4}>
                        <TextField
                            fullWidth
                            select
                            label="Primary Category"
                            value={categoryFirst}
                            onChange={(e) => setCategoryFirst(e.target.value)}
                            margin="normal"
                        >
                            {categories.map((category) => (
                                <MenuItem key={category._id} value={category.categoryName}>
                                    {category.categoryName}
                                </MenuItem>
                            ))}
                        </TextField>
                    </Grid>
                    <Grid item xs={4}>
                        <TextField
                            fullWidth
                            select
                            label="Secondary Category"
                            value={categorySecond}
                            onChange={(e) => setCategorySecond(e.target.value)}
                            margin="normal"
                        >
                            {categories.map((category) => (
                                <MenuItem key={category._id} value={category.categoryName}>
                                    {category.categoryName}
                                </MenuItem>
                            ))}
                        </TextField>
                    </Grid>
                    <Grid item xs={4}>
                        <TextField
                            fullWidth
                            select
                            label="Tertiary Category"
                            value={categoryThird}
                            onChange={(e) => setCategoryThird(e.target.value)}
                            margin="normal"
                        >
                            {categories.map((category) => (
                                <MenuItem key={category._id} value={category.categoryName}>
                                    {category.categoryName}
                                </MenuItem>
                            ))}
                        </TextField>
                    </Grid>
                </Grid>

                <Grid container spacing={2}>
                    <Grid item xs={4}>
                        <TextField
                            fullWidth
                            label="Cost"
                            value={cost}
                            onChange={(e) => setCost(e.target.value)}
                            margin="normal"
                            inputProps={{ maxLength: 10 }}
                        />
                    </Grid>
                    <Grid item xs={8}>
                        <TextField
                            fullWidth
                            label="Recurrence Rule"
                            value={recurrenceRule}
                            onChange={(e) => setRecurrenceRule(e.target.value)}
                            margin="normal"
                        />
                    </Grid>
                </Grid>

                <Button onClick={handleSave} variant="contained" color="primary" sx={{ mt: 2 }}>
                    Save
                </Button>

                <Button onClick={onClose} variant="outlined" color="secondary" sx={{ mt: 2, ml: 2 }}>
                    Cancel
                </Button>
            </Box>
        </Modal>
    );
};

export default EventCRUDModal;
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/Modals/FAQModal.js

// components/Modals/FAQModal.js

import React from 'react';
import { Modal, Box, Typography, Button } from '@mui/material';
import PropTypes from 'prop-types';

const modalStyle = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '80%',
  maxWidth: '400px',
  bgcolor: 'background.paper',
  borderRadius: '8px',
  boxShadow: 24,
  p: 4,
};

const FAQModal = ({ open, handleClose }) => {
  return (
    <Modal
      open={open}
      onClose={handleClose}
      aria-labelledby="help-modal-title"
      aria-describedby="help-modal-description"
    >
      <Box sx={modalStyle}>
        <Typography id="help-modal-title" variant="h6" component="h2">
          Help & Information
        </Typography>
        <Box sx={{ mt: 2 }}>
          <Typography>
            <strong>How can I become a Regional Organizer?</strong>
          </Typography>
          <Typography>Contact your Regional Admin to request access.</Typography>

          <Typography sx={{ mt: 2 }}>
            <strong>How can I become a Regional Admin?</strong>
          </Typography>
          <Typography>Regional Admins are appointed by System Admins. Contact your organization.</Typography>

          <Typography sx={{ mt: 2 }}>
            <strong>How can I sign up?</strong>
          </Typography>
          <Typography>Go to the Login/Signup section to create an account.</Typography>

          <Typography sx={{ mt: 2 }}>
            <strong>Do we sell your information?</strong>
          </Typography>
          <Typography>No, we do not sell or share your information with third parties.</Typography>
        </Box>
        <Button onClick={handleClose} variant="contained" sx={{ mt: 3 }}>
          Close
        </Button>
      </Box>
    </Modal>
  );
};

FAQModal.propTypes = {
  open: PropTypes.bool.isRequired,
  handleClose: PropTypes.func.isRequired,
};

export default FAQModal;
************. End of Code *************





*************  Start of Code ***********
Code object : //./components/Providers.js

// src/app/components/Providers.js

"use client";

import React from 'react';
import PropTypes from 'prop-types';
import { AuthProvider } from '@/contexts/AuthContext';
import { RegionsProvider } from '@/contexts/RegionsContext';
import { CalendarProvider } from '@/contexts/CalendarContext';
import { PostFilterProvider } from '@/contexts/PostFilterContext';
import { RoleProvider } from '@/contexts/RoleContext';

const Providers = ({ children }) => {
  return (
    <AuthProvider>
      <RegionsProvider>
        <CalendarProvider>
          <PostFilterProvider>
            <RoleProvider>
              {children}
            </RoleProvider>
          </PostFilterProvider>
        </CalendarProvider>
      </RegionsProvider>
    </AuthProvider>
  );
};

Providers.propTypes = {
  children: PropTypes.node.isRequired,
};

export default Providers;
************. End of Code *************





*************  Start of Code ***********
Code object : //./hooks/useRegions.js

//app/hooks/useRegions.js
import { useState, useEffect } from 'react';
import axios from 'axios';

export function useRegions() {
    const [regions, setRegions] = useState([]);


    useEffect(() => {
        console.log('useEffect in useRegions');
        const getRegions = async () => {
            try {

                const response = await axios.get(`${process.env.NEXT_PUBLIC_BE_URL}/api/regions/activeRegions`)
                setRegions(response.data);
            } catch (error) {
                console.error('Error fetching regions:', error);
            }
        };
        getRegions();
    }, []);

    return regions;
}

************. End of Code *************





*************  Start of Code ***********
Code object : //./hooks/usePostFilter.js

//app/hooks/usePostFilter.js

import { useState, useEffect, useMemo } from "react";

export const usePostFilter = (
  events,
  categories,
  selectedOrganizers = [],
  selectedTags = []
) => {
  const [activeCategories, setActiveCategories] = useState([]);

  // Initialize activeCategories with all categories when categories change
  useEffect(() => {
    if (categories && categories.length > 0) {
      setActiveCategories(categories.map((cat) => cat.categoryName));
    }
  }, [categories]);

  // Update handleCategoryChange to toggle categories
  const handleCategoryChange = (categoryName) => {
    setActiveCategories((prevCategories) => {
      if (prevCategories.includes(categoryName)) {
        // Remove the category
        return prevCategories.filter((cat) => cat !== categoryName);
      } else {
        // Add the category
        return [...prevCategories, categoryName];
      }
    });
  };

  // Memoize filteredEvents to prevent unnecessary computations and infinite loops
  const filteredEvents = useMemo(() => {
    if (!Array.isArray(events)) return [];

    // Ensure selectedOrganizers and selectedTags are arrays
    const organizers = Array.isArray(selectedOrganizers)
      ? selectedOrganizers
      : [];
    const tags = Array.isArray(selectedTags) ? selectedTags : [];

    // Apply filters only if there are values present
    return events.filter((event) => {
      const {
        categoryFirst,
        categorySecond,
        categoryThird,
        organizerId,
        tags: eventTags,
      } = event.extendedProps || {};

      // Category filter
      const matchesCategory =
        !activeCategories ||
        activeCategories.length === 0 ||
        activeCategories.includes(categoryFirst) ||
        activeCategories.includes(categorySecond) ||
        activeCategories.includes(categoryThird);

      // Organizer filter
      const matchesOrganizer =
        organizers.length === 0 ||
        organizerId === undefined ||
        organizers.includes(organizerId);

      // Tags filter
      const matchesTags =
        tags.length === 0 ||
        (eventTags && tags.some((tag) => eventTags.includes(tag)));

      return matchesCategory && matchesOrganizer && matchesTags;
    });
  }, [events, activeCategories, selectedOrganizers, selectedTags]);

  return {
    activeCategories,
    filteredEvents,
    handleCategoryChange,
  };
};

************. End of Code *************





*************  Start of Code ***********
Code object : //./hooks/useCalendarPage.js

// app/hooks/useCalendarPage.js

import { useState, useContext, useRef } from "react";
import { useEvents } from "@/hooks/useEvents";
import { usePostFilter } from "@/hooks/usePostFilter";
import { transformEvents } from "@/utils/transformEvents";
import { categoryColors } from "@/utils/categoryColors";
import useCategories from "@/hooks/useCategories";
import { CalendarContext } from '@/contexts/CalendarContext';
import { RegionsContext } from '@/contexts/RegionsContext';
import { PostFilterContext } from '@/contexts/PostFilterContext';
import { RoleContext } from '@/contexts/RoleContext';
import { listOfAllRoles } from '@/utils/masterData';


export const useCalendarPage = () => {
  const [menuAnchor, setMenuAnchor] = useState(null); // To track submenu position
  const [menuItems, setMenuItems] = useState([]); // Menu items based on the role
  const [clickedDate, setClickedDate] = useState(null); // Date or event clicked
  const categories = useCategories();
    const { 
      selectedRegion,
      selectedRegionID, // Access region ID
    setSelectedRegion, 
    selectedDivision, 
    setSelectedDivision, 
    selectedCity, 
    setSelectedCity 
    } = useContext(RegionsContext);
  console.log("useCalPage -> åSelected Region:", selectedRegion);

  const { selectedRole } = useContext(RoleContext);
  const { selectedOrganizers, setSelectedOrganizers, selectedCategories, setSelectedCategories } = useContext(PostFilterContext);
  const { datesSet, setDatesSet } = useContext(CalendarContext);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [isCreateModalOpen, setCreateModalOpen] = useState(false);

  const calendarRef = useRef(null);
const handleRegionChange = (event) => {
  const selectedValue = event.target.value; // Extract the selected value (region ID)
  
  if (!selectedValue) {
    console.error("No region selected");
    return;
  }

  const selectedRegion = regions.find(region => region._id === selectedValue); // Lookup the region based on ID

  if (selectedRegion) {
    console.log("Region Selected:", selectedRegion);

    // Set the selected region object and its ID in the context
    setSelectedRegion(selectedRegion);  // Pass the entire region object to the context
    setSelectedDivision('');  // Reset division
    setSelectedCity('');      // Reset city

    // Optionally refresh events based on the new region
    refreshEvents();
  } else {
    console.error("Region not found for selected value:", selectedValue);
  }
};
  
  const handleDatesSet = (dateInfo) => {
    setDatesSet({
      start: dateInfo.startStr,
      end: dateInfo.endStr,
    });
  };

  const { events, refreshEvents } = useEvents(
    selectedRegion,
    selectedDivision,
    selectedCity,
    datesSet?.start,
    datesSet?.end
  );

  // Transform the fetched events
  const transformedEvents = transformEvents(events);

  // Use the post filter to filter based on active categories (and future organizers/tags)
  const { activeCategories, filteredEvents, handleCategoryChange } =
    usePostFilter(
      transformedEvents,
      categories,
      selectedOrganizers,
      [] // Ignoring tags for now
    );

  // Ensure filteredEvents is always an array before mapping
  const coloredFilteredEvents = (filteredEvents || []).map((event) => {
    const categoryColor =
      categoryColors[event.extendedProps.categoryFirst] || "lightGrey";
    return {
      ...event,
      backgroundColor: categoryColor,
      textColor:
        event.extendedProps.categoryFirst === "Milonga" ? "white" : "black",
      borderColor: categoryColor,
    };
  });

  const handleEventCreated = (newEvent) => {
    console.log("New event created:", newEvent);
    refreshEvents();
  };

  const handlePrev = () => {
    // Implement navigation to previous period
    calendarRef.current.getApi().prev();
  };

  const handleNext = () => {
    // Implement navigation to next period
    calendarRef.current.getApi().next();
  };

  const handleToday = () => {
    // Implement navigation to today
    calendarRef.current.getApi().today();
  };

  const handleDateClick = (arg) => {
    console.log("Date clicked:", arg.dateStr);
    setClickedDate(arg.dateStr); // Store the clicked date


    if (selectedRole === listOfAllRoles.REGIONAL_ORGANIZER) {
      // For Regional Organizer, show date-related options
      setMenuItems([
        { label: 'Change Date', action: 'changeDate' },
        { label: 'Add Single Event', action: 'addSingleEvent' },
        { label: 'Add Repeating Event', action: 'addRepeatingEvent' },
      ]);
      setMenuAnchor({
        mouseX: arg.jsEvent.clientX,
        mouseY: arg.jsEvent.clientY,
      });
    }

    if (selectedRole === listOfAllRoles.NAMED_USER && new Date(arg.dateStr) < new Date()) {
      // If Named User and date is in the past
      setMenuItems([
        { label: 'View Details', action: 'viewDetails' },
        { label: 'Add Comment/Photo', action: 'addCommentPhoto' },
      ]);
      setMenuAnchor({
        mouseX: arg.jsEvent.clientX,
        mouseY: arg.jsEvent.clientY,
      });
    }

    // Add other role-based conditions as needed...
  };

  const handleEventClick = (arg) => {
    console.log("Event clicked:", arg.event.title);

    if (selectedRole === listOfAllRoles.REGIONAL_ORGANIZER) {
      // For Regional Organizer, show event-related options
      setMenuItems([
        { label: 'Edit Event', action: 'editEvent' },
        { label: 'Delete Event', action: 'deleteEvent' },
        { label: 'View Event', action: 'viewEvent' },
        { label: 'Add Photos', action: 'addPhotos' },
      ]);
      setMenuAnchor({
        mouseX: arg.jsEvent.clientX,
        mouseY: arg.jsEvent.clientY,
      });
    }

    if (selectedRole === listOfAllRoles.NAMED_USER && new Date(arg.event.start) < new Date()) {
      // For Named User, show limited event-related options if event is in the past
      setMenuItems([
        { label: 'View Details', action: 'viewDetails' },
        { label: 'Add Comment/Photo', action: 'addCommentPhoto' },
      ]);
      setMenuAnchor({
        mouseX: arg.jsEvent.clientX,
        mouseY: arg.jsEvent.clientY,
      });
    }

    if (selectedRole === listOfAllRoles.EVERYONE) {
      // Everyone can only view details
      setMenuItems([
        { label: 'View Event Details', action: 'viewDetails' },
      ]);
      setMenuAnchor({
        mouseX: arg.jsEvent.clientX,
        mouseY: arg.jsEvent.clientY,
      });
    }
  };

const handleMenuAction = (action) => {
  console.log(`Action selected: ${action}`);
  setMenuAnchor(null);

  if (action === 'addSingleEvent') {
    setCreateModalOpen(true); // Open the CreateSingleEvent modal
  }

};

  const handleMenuClose = () => {
    setMenuAnchor(null);
  };

  return {
    categories,
    activeCategories,
    handleCategoryChange,
    handleDatesSet, // Return handleDatesSet
    selectedOrganizers,
    setSelectedOrganizers,
    selectedCategories,
    setSelectedCategories,
    datesSet,
    events,
    coloredFilteredEvents,
    refreshEvents,
    selectedEvent,
    setSelectedEvent,
    isCreateModalOpen,
    setCreateModalOpen,
    handleEventCreated,
handleRegionChange,
    handlePrev,
    handleNext,
    handleToday,
    handleDateClick,
    handleEventClick,
    calendarRef, // Return calendarRef
    handleMenuAction,
    handleMenuClose,
    menuAnchor,
    menuItems
  };
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./hooks/useAuth.js

//app/hooks/useAuth.js


import { useContext } from 'react';
import { AuthContext } from '@/contexts/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

************. End of Code *************





*************  Start of Code ***********
Code object : //./hooks/useLocations.js

// useLocations.js
import { useState, useEffect } from 'react';
import axios from 'axios';

export const useLocations = (regionId, divisionId, cityId) => {
    const [locations, setLocations] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchLocations = async () => {
            console.log("Fetching locations with the following parameters:");
            console.log("Region ID:", regionId);
            console.log("Division ID:", divisionId);
            console.log("City ID:", cityId);

            setLoading(true);
            setError(null);

            try {
                const response = await axios.get(`${process.env.NEXT_PUBLIC_BE_URL}/api/locations`, {
                    params: {
                        region: regionId,
                        division: divisionId,
                        city: cityId
                    }
                });

                console.log("API Response:", response.data);  // Log the response data
                setLocations(response.data);
            } catch (error) {
                console.error("Error fetching locations:", error);
                setError(error);
            } finally {
                setLoading(false);
            }
        };

        if (regionId) {  // Ensure regionId is present before making the call
            fetchLocations();
        }
    }, [regionId, divisionId, cityId]);

    return { locations, loading, error };
};
************. End of Code *************





*************  Start of Code ***********
Code object : //./hooks/useOrganizers.js

//app/hooks/useOrganizers.js

import { useState, useEffect } from 'react';
import axios from 'axios';

const useOrganizers = (calculatedRegion) => {
    const [organizers, setOrganizers] = useState([]);

    useEffect(() => {
        const getOrganizers = async (region) => {
            if (!region) {
                // If no region is provided, return early and set organizers to an empty array
                setOrganizers([]);
                return;
            }

            try {
                const response = await axios.get(`${process.env.NEXT_PUBLIC_BE_URL}/api/organizers`, {
                    params: {
                        activeCalculatedRegion: region
                    }
                });

                setOrganizers(response.data);
            } catch (error) {
                console.error('Error fetching organizers:', error);
                                setOrganizers([]);
            }
        };

        // Call getOrganizers only if calculatedRegion is available
        getOrganizers(calculatedRegion);
    }, [calculatedRegion]);

    return organizers;
};

export default useOrganizers;
************. End of Code *************





*************  Start of Code ***********
Code object : //./hooks/useEvents.js

//app/hooks/useEvents.js// app/hooks/useEvents.js

import { useState, useEffect } from "react";
import axios from "axios";

export function useEvents(
  selectedRegion,
  selectedDivision,
  selectedCity,
  calendarStart,
  calendarEnd
) {
  const [events, setEvents] = useState([]);

  const getEvents = async () => {
    if (!selectedRegion) {
      setEvents([]);
      return;
    }
    try {
      console.log("useEvents-> Making Events API request:", {
        selectedRegion,
        selectedDivision,
        selectedCity,
        calendarStart,
        calendarEnd,
      });

      const response = await axios.get(
        `${process.env.NEXT_PUBLIC_BE_URL}/api/events/byCalculatedLocations`,
        {
          params: {
            active: true,
            calculatedRegionName: selectedRegion,
            calculatedDivisionName: selectedDivision || undefined,
            calculatedCityName: selectedCity || undefined,
            start: calendarStart,
            end: calendarEnd,
          },
        }
      );

      setEvents(response.data);
    } catch (error) {
      console.error("useEvents-> Error fetching events:", error);
      setEvents([]);
    }
  };

  useEffect(() => {
    getEvents();
  }, [
    selectedRegion,
    selectedDivision,
    selectedCity,
    calendarStart,
    calendarEnd,
  ]);

  return { events, refreshEvents: getEvents };
}

export function useCreateEvent() {
  const createEvent = async (eventData) => {
    try {
      const response = await axios.post(
        `${process.env.NEXT_PUBLIC_BE_URL}/api/events/post`,
        eventData
      );
      console.log("Event created successfully:", response.data);
      return response.data;
    } catch (error) {
      console.error("Error creating event:", error);
      throw error;
    }
  };

  return createEvent;
}
************. End of Code *************





*************  Start of Code ***********
Code object : //./hooks/useCategories.js

//app/hooks/useCategories.js

import { useState, useEffect } from 'react';
import axios from 'axios';

const useCategories = () => {
    const [categories, setCategories] = useState([]);

    useEffect(() => {
        const fetchCategories = async () => {
            try {
                const response = await axios.get(`${process.env.NEXT_PUBLIC_BE_URL}/api/categories`);

                setCategories(response.data);
            } catch (error) {
                console.error('Error fetching categories:', error);
            }
        };

        fetchCategories();
    }, []);

    return categories;
};

export default useCategories;
************. End of Code *************





